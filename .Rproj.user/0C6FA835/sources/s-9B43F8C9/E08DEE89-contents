{
 "qri": "tf:0",
 "steps": [
  {
   "category": "download-example",
   "name": "download-example",
   "script": "# consumes an ArcGIS online featureServer published by the NYC Department of Transportation\n# converts the geojson response into a tabular dataset for archival in Qri\n\n# import dependencies\nload(\"http.star\", \"http\") \nload(\"dataframe.star\", \"dataframe\") \nload(\"encoding/json.star\", \"json\") \n\n\ndata_feed_url = \"https://services.arcgis.com/wmZOI9vyUBq1zTZx/arcgis/rest/services/Open_Streets_Dissolve_FS/FeatureServer/0/query?where=1%3D1\u0026objectIds=\u0026time=\u0026geometry=\u0026geometryType=esriGeometryEnvelope\u0026inSR=\u0026spatialRel=esriSpatialRelIntersects\u0026resultType=none\u0026distance=0.0\u0026units=esriSRUnit_Meter\u0026returnGeodetic=false\u0026outFields=*\u0026returnGeometry=true\u0026featureEncoding=esriDefault\u0026multipatchOption=xyFootprint\u0026maxAllowableOffset=\u0026geometryPrecision=\u0026outSR=\u0026datumTransformation=\u0026applyVCSProjection=false\u0026returnIdsOnly=false\u0026returnUniqueIdsOnly=false\u0026returnCountOnly=false\u0026returnExtentOnly=false\u0026returnQueryGeometry=false\u0026returnDistinctValues=false\u0026cacheHint=false\u0026orderByFields=\u0026groupByFieldsForStatistics=\u0026outStatistics=\u0026having=\u0026resultOffset=\u0026resultRecordCount=\u0026returnZ=false\u0026returnM=false\u0026returnExceededLimitFeatures=true\u0026quantizationParameters=\u0026sqlFormat=none\u0026f=pgeojson\u0026token=\"\ngeojson = json.decode(http.get(data_feed_url).body())\n\nrows = []\n\n# turn each feature into a row\nfor feature in geojson.get('features'):\n  print(feature)\n\n  if 'properties' in feature:\n    rows.append([\n      json.encode(feature.get('geometry')),\n      feature.get('properties').get('FID'),\n      feature.get('properties').get('Location_P'),\n      feature.get('properties').get('Borough'),\n      feature.get('properties').get('On_Street'),\n      feature.get('properties').get('From_Stree'),\n      feature.get('properties').get('To_Street'),\n      feature.get('properties').get('Type'),\n      feature.get('properties').get('Open_Date'),\n      feature.get('properties').get('Start_Time'),\n      feature.get('properties').get('End_Time'),\n      feature.get('properties').get('Day_Of_Wee'),\n      feature.get('properties').get('NHoodName'),\n      feature.get('properties').get('symbol'),\n      feature.get('properties').get('Shape_Leng'),\n      feature.get('properties').get('Length_In_'),\n      feature.get('properties').get('Shape__Length')\n    ])\n\n\n# get the previous version of this dataset\nworkingDataset = dataset.latest()\n# set the body of the dataset to be our new data\nworkingDataset.body = dataframe.DataFrame(rows, columns=[\n  'geom',\n  'feature_id',\n  'location_or_partner',\n  'borough',\n  'on_street',\n  'from_street',\n  'to_street',\n  'type',\n  'open_date',\n  'start_time',\n  'end_time',\n  'day_of_week',\n  'neighborhood_name',\n  'symbol',\n  'shape_length',\n  'length_in',\n  'shape_length_2'\n])\n\n# commit the changes\ndataset.commit(workingDataset)\n",
   "syntax": "starlark"
  }
 ]
}